package edu.crackInterview;

public class chap8_8 {
	// 单例模式：
	// public class Restaurant{
	// private static Restaurant _instances = null;
	// protected Restaurant(){}
	// public static Restaurant getInstance()
	// {
	// if(_instances == null)
	// _instances = new Restaurant();
	// return _instances;
	// }
	// }
	// 工厂模式
	// public class cardGame{
	// public static cardGame createCardGame(GameType type)
	// {
	// if(type == GameType.Poker)
	// return new PokerGame();
	// else if(type == GameType.BlackJack)
	// return new BlackJack();
	// return null;
	// }
	// }
	// 8.1 设计用于通用扑克牌的数据结构，并说明你会如何创建该数据结构的子类，
	// 实现“二十一”点游戏
	// 8.2有个呼叫中心，员工分为：接线员、主管、经理。客户来电先分配给有空的
	//接线员。若接线员没空则装给主管，主管没空则转给精力。设计此问题的类和数据结构
	//实现dispatch，将来电分配给第一个有空的员工
	//8.3运用面向对象的原则，设计一款音乐点唱机
	//8.4运用面向对象的原则，设计一个停车场
	//8.5设计在线阅读系统的数据结构
	//8.6实现拼图程序，设计相关数据结构并提供一种拼图算法。假设你有一个
	//fitwith方法，传入两块拼图，若能拼在一起，返回true
	//8.7奥赛罗棋玩法如下：每一枚棋子的一面为白，一面为黑。游戏双方各执黑、白对决
	//当一枚棋子的左右或上下同时被对方的棋子夹住，则这枚棋子被吃掉，
	//随即翻面为对方颜色，到你落子时，必须至少吃掉对方一枚棋子，任一方无棋可下，
	//游戏结束，最后，棋子较多一方获胜
	//8.8设计内存文件系统的数据结构和算法，说明具体做法
	//8.9设计实现散列表，用链接处理冲突
	//
}
